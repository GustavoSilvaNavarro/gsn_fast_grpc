// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: todo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';

export const protobufPackage = 'todo';

/** The Todo item message */
export interface Todo {
  id: number;
  title: string;
  completed: boolean;
}

/** Request and Response messages for individual operations */
export interface CreateTodoRequest {
  title: string;
}

export interface UpdateTodoRequest {
  id: number;
  title: string;
  completed: boolean;
}

export interface TodoId {
  id: number;
}

export interface DeleteResponse {
  success: string;
}

/** A message to hold a list of todos */
export interface TodoList {
  /** repeated is key to allow a list of todos or empty */
  todos: Todo[];
}

/** A simple message for no input or empty responses */
export interface Empty {}

/** Response for the health check endpoint */
export interface HealthCheckResponse {
  status: string;
}

function createBaseTodo(): Todo {
  return { id: 0, title: '', completed: false };
}

export const Todo: MessageFns<Todo> = {
  encode(message: Todo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== '') {
      writer.uint32(18).string(message.title);
    }
    if (message.completed !== false) {
      writer.uint32(24).bool(message.completed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Todo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTodo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.completed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Todo {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : '',
      completed: isSet(object.completed) ? globalThis.Boolean(object.completed) : false,
    };
  },

  toJSON(message: Todo): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== '') {
      obj.title = message.title;
    }
    if (message.completed !== false) {
      obj.completed = message.completed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Todo>, I>>(base?: I): Todo {
    return Todo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Todo>, I>>(object: I): Todo {
    const message = createBaseTodo();
    message.id = object.id ?? 0;
    message.title = object.title ?? '';
    message.completed = object.completed ?? false;
    return message;
  },
};

function createBaseCreateTodoRequest(): CreateTodoRequest {
  return { title: '' };
}

export const CreateTodoRequest: MessageFns<CreateTodoRequest> = {
  encode(message: CreateTodoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== '') {
      writer.uint32(10).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTodoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTodoRequest {
    return { title: isSet(object.title) ? globalThis.String(object.title) : '' };
  },

  toJSON(message: CreateTodoRequest): unknown {
    const obj: any = {};
    if (message.title !== '') {
      obj.title = message.title;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTodoRequest>, I>>(base?: I): CreateTodoRequest {
    return CreateTodoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTodoRequest>, I>>(object: I): CreateTodoRequest {
    const message = createBaseCreateTodoRequest();
    message.title = object.title ?? '';
    return message;
  },
};

function createBaseUpdateTodoRequest(): UpdateTodoRequest {
  return { id: 0, title: '', completed: false };
}

export const UpdateTodoRequest: MessageFns<UpdateTodoRequest> = {
  encode(message: UpdateTodoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== '') {
      writer.uint32(18).string(message.title);
    }
    if (message.completed !== false) {
      writer.uint32(24).bool(message.completed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTodoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.completed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTodoRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : '',
      completed: isSet(object.completed) ? globalThis.Boolean(object.completed) : false,
    };
  },

  toJSON(message: UpdateTodoRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== '') {
      obj.title = message.title;
    }
    if (message.completed !== false) {
      obj.completed = message.completed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTodoRequest>, I>>(base?: I): UpdateTodoRequest {
    return UpdateTodoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTodoRequest>, I>>(object: I): UpdateTodoRequest {
    const message = createBaseUpdateTodoRequest();
    message.id = object.id ?? 0;
    message.title = object.title ?? '';
    message.completed = object.completed ?? false;
    return message;
  },
};

function createBaseTodoId(): TodoId {
  return { id: 0 };
}

export const TodoId: MessageFns<TodoId> = {
  encode(message: TodoId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TodoId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTodoId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TodoId {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: TodoId): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TodoId>, I>>(base?: I): TodoId {
    return TodoId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TodoId>, I>>(object: I): TodoId {
    const message = createBaseTodoId();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseDeleteResponse(): DeleteResponse {
  return { success: '' };
}

export const DeleteResponse: MessageFns<DeleteResponse> = {
  encode(message: DeleteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== '') {
      writer.uint32(10).string(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteResponse {
    return { success: isSet(object.success) ? globalThis.String(object.success) : '' };
  },

  toJSON(message: DeleteResponse): unknown {
    const obj: any = {};
    if (message.success !== '') {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteResponse>, I>>(base?: I): DeleteResponse {
    return DeleteResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteResponse>, I>>(object: I): DeleteResponse {
    const message = createBaseDeleteResponse();
    message.success = object.success ?? '';
    return message;
  },
};

function createBaseTodoList(): TodoList {
  return { todos: [] };
}

export const TodoList: MessageFns<TodoList> = {
  encode(message: TodoList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.todos) {
      Todo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TodoList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTodoList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.todos.push(Todo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TodoList {
    return { todos: globalThis.Array.isArray(object?.todos) ? object.todos.map((e: any) => Todo.fromJSON(e)) : [] };
  },

  toJSON(message: TodoList): unknown {
    const obj: any = {};
    if (message.todos?.length) {
      obj.todos = message.todos.map((e) => Todo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TodoList>, I>>(base?: I): TodoList {
    return TodoList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TodoList>, I>>(object: I): TodoList {
    const message = createBaseTodoList();
    message.todos = object.todos?.map((e) => Todo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseHealthCheckResponse(): HealthCheckResponse {
  return { status: '' };
}

export const HealthCheckResponse: MessageFns<HealthCheckResponse> = {
  encode(message: HealthCheckResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== '') {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheckResponse {
    return { status: isSet(object.status) ? globalThis.String(object.status) : '' };
  },

  toJSON(message: HealthCheckResponse): unknown {
    const obj: any = {};
    if (message.status !== '') {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheckResponse>, I>>(base?: I): HealthCheckResponse {
    return HealthCheckResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheckResponse>, I>>(object: I): HealthCheckResponse {
    const message = createBaseHealthCheckResponse();
    message.status = object.status ?? '';
    return message;
  },
};

/** The service definition with all CRUD-like methods. */
export type TodoServiceService = typeof TodoServiceService;
export const TodoServiceService = {
  createTodo: {
    path: '/todo.TodoService/CreateTodo',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateTodoRequest): Buffer => Buffer.from(CreateTodoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateTodoRequest => CreateTodoRequest.decode(value),
    responseSerialize: (value: Todo): Buffer => Buffer.from(Todo.encode(value).finish()),
    responseDeserialize: (value: Buffer): Todo => Todo.decode(value),
  },
  readTodo: {
    path: '/todo.TodoService/ReadTodo',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TodoId): Buffer => Buffer.from(TodoId.encode(value).finish()),
    requestDeserialize: (value: Buffer): TodoId => TodoId.decode(value),
    responseSerialize: (value: Todo): Buffer => Buffer.from(Todo.encode(value).finish()),
    responseDeserialize: (value: Buffer): Todo => Todo.decode(value),
  },
  updateTodo: {
    path: '/todo.TodoService/UpdateTodo',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateTodoRequest): Buffer => Buffer.from(UpdateTodoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateTodoRequest => UpdateTodoRequest.decode(value),
    responseSerialize: (value: Todo): Buffer => Buffer.from(Todo.encode(value).finish()),
    responseDeserialize: (value: Buffer): Todo => Todo.decode(value),
  },
  deleteTodo: {
    path: '/todo.TodoService/DeleteTodo',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TodoId): Buffer => Buffer.from(TodoId.encode(value).finish()),
    requestDeserialize: (value: Buffer): TodoId => TodoId.decode(value),
    responseSerialize: (value: DeleteResponse): Buffer => Buffer.from(DeleteResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): DeleteResponse => DeleteResponse.decode(value),
  },
  listTodos: {
    path: '/todo.TodoService/ListTodos',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: TodoList): Buffer => Buffer.from(TodoList.encode(value).finish()),
    responseDeserialize: (value: Buffer): TodoList => TodoList.decode(value),
  },
} as const;

export interface TodoServiceServer extends UntypedServiceImplementation {
  createTodo: handleUnaryCall<CreateTodoRequest, Todo>;
  readTodo: handleUnaryCall<TodoId, Todo>;
  updateTodo: handleUnaryCall<UpdateTodoRequest, Todo>;
  deleteTodo: handleUnaryCall<TodoId, DeleteResponse>;
  listTodos: handleUnaryCall<Empty, TodoList>;
}

export interface TodoServiceClient extends Client {
  createTodo(
    request: CreateTodoRequest,
    callback: (error: ServiceError | null, response: Todo) => void,
  ): ClientUnaryCall;
  createTodo(
    request: CreateTodoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Todo) => void,
  ): ClientUnaryCall;
  createTodo(
    request: CreateTodoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Todo) => void,
  ): ClientUnaryCall;
  readTodo(request: TodoId, callback: (error: ServiceError | null, response: Todo) => void): ClientUnaryCall;
  readTodo(
    request: TodoId,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Todo) => void,
  ): ClientUnaryCall;
  readTodo(
    request: TodoId,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Todo) => void,
  ): ClientUnaryCall;
  updateTodo(
    request: UpdateTodoRequest,
    callback: (error: ServiceError | null, response: Todo) => void,
  ): ClientUnaryCall;
  updateTodo(
    request: UpdateTodoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Todo) => void,
  ): ClientUnaryCall;
  updateTodo(
    request: UpdateTodoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Todo) => void,
  ): ClientUnaryCall;
  deleteTodo(
    request: TodoId,
    callback: (error: ServiceError | null, response: DeleteResponse) => void,
  ): ClientUnaryCall;
  deleteTodo(
    request: TodoId,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteResponse) => void,
  ): ClientUnaryCall;
  deleteTodo(
    request: TodoId,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteResponse) => void,
  ): ClientUnaryCall;
  listTodos(request: Empty, callback: (error: ServiceError | null, response: TodoList) => void): ClientUnaryCall;
  listTodos(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TodoList) => void,
  ): ClientUnaryCall;
  listTodos(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TodoList) => void,
  ): ClientUnaryCall;
}

export const TodoServiceClient = makeGenericClientConstructor(TodoServiceService, 'todo.TodoService') as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TodoServiceClient;
  service: typeof TodoServiceService;
  serviceName: string;
};

/** A dedicated service for server health checks */
export type HealthServiceService = typeof HealthServiceService;
export const HealthServiceService = {
  healthz: {
    path: '/todo.HealthService/Healthz',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: HealthCheckResponse): Buffer => Buffer.from(HealthCheckResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): HealthCheckResponse => HealthCheckResponse.decode(value),
  },
} as const;

export interface HealthServiceServer extends UntypedServiceImplementation {
  healthz: handleUnaryCall<Empty, HealthCheckResponse>;
}

export interface HealthServiceClient extends Client {
  healthz(
    request: Empty,
    callback: (error: ServiceError | null, response: HealthCheckResponse) => void,
  ): ClientUnaryCall;
  healthz(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HealthCheckResponse) => void,
  ): ClientUnaryCall;
  healthz(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HealthCheckResponse) => void,
  ): ClientUnaryCall;
}

export const HealthServiceClient = makeGenericClientConstructor(
  HealthServiceService,
  'todo.HealthService',
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): HealthServiceClient;
  service: typeof HealthServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
